*vimdo.txt*    vimdo     Version 0.1.0    Last change: October 11 2018


DO.VIM - TABLE OF CONTENTS                                    *do.vim* *vimdo*
==============================================================================

  Introduction                                        |vimdo-introduction|
  Quick start                                         |vimdo-quick-start|
  Groups                                              |vimdo-groups|
  Options                                             |vimdo-options|
  Interactive mode                                    |vimdo-interactive-mode|
  Group dictionary                                    |vimdo-group-dictionary|
  Arbitrary groups                                    |vimdo-arbitrary-groups|
  Default commands                                    |vimdo-default-commands|




INTRODUCTION                                              *vimdo-introduction*
==============================================================================

The concept is to have a group of commands that `do something`, in a way that
it makes it easy to remember their mappings, and that you can show by running
a command.

There is a default prefix (`do`) with a set of commands that you can activate,
but it will work with any of your mappings.

What's the difference between this and just typing `:nmap ...`?

- you can set descriptions for each mapping, and the output is more readable.
- you can filter entries by pressing a key.
- it can show the files where mappings are defined.
- it can be run in interactive mode.




QUICK START                                                *vimdo-quick-start*
==============================================================================

Use the main command to show all mappings that start with a prefix:
>
  :ShowDos g
<
you don't need any customization for this. But if you want to add some
description to your custom mappings?

Say you have a bunch of mappngs that start with `g`, and you want to add some
description, so that it will show up when you run the command above.
You create a group for `g`, and you write the descriptions inside:
>
  let g:vimdo = {}
  let g:vimdo.g = {}
  let g:vimdo.g.cc = 'comment line toggle'
  let g:vimdo.g.ot = 'open terminal at current file position'

Where the keys inside the `g` group are the mappings `gcc`, `got`, etc.

If some of these mappings are <buffer> mappings (for example you defined them
in a |ftplugin|), you can call the command with a <bang>, and it will only
show <buffer> mappings:
>
    :ShowDos! g

That's it for a basic usage.




GROUPS                                                          *vimdo-groups*
==============================================================================

An example of creating a new group with `do` prefix.

First, you assign your mappings, as you normally would. Examples:

Copy entire buffer to system clipboard: >
  nnoremap doca   :%y+<cr>

Select entire buffer: >
  nnoremap dosa   ggVG

Json pretty print: >
  nnoremap dojpp  :%!python -m json.tool<cr>

Set very large tabs (table mode): >
  nnoremap dotm   :setlocal noexpandtab tabstop=20 shiftwidth=20 softtabstop=20 nowrap<cr>

Trim whitespaces (and print their number): >
  nnoremap dows   :m`:keeppatterns %s/\s\+$//gn<CR>:keeppatterns silent! %s/\s\+$//e<CR>``

You initialize the `g:vimdo` dict (if you didn't already!):
>
  let g:vimdo = {}

Then register descriptions for the mappings (see that the mapping prefix isn't
repeated):
>
  let g:vimdo.do = {
    \'ca':  'copy all',
    \'sa':  'select all',
    \'jpp': 'json pretty print',
    \'tm':  'table mode',
    \'ws':  'trim whitespaces',
    \}

Finally you create a mapping to show your group:
>
  nnoremap dO  :ShowDos do<cr>

------------------------------------------------------------------------------

An example of creating a new group with fugitive.vim commands.

You assign your mappings:
>
  nnoremap \gs  :Gstatus<cr>
  nnoremap \gp  :Gpush<cr>
  nnoremap \gl  :0Glog<cr>
  nnoremap \gd  :Gvdiff<Space>
  nnoremap \gc  :Gcommit<cr>
  nnoremap \ga  :Gcommit --amend<cr>

You initialize the new group:
>
  let g:vimdo['\g'] = { 'label' : 'git commands',
    \'s':  'status',
    \'p':  'push',
    \'l':  'log for current file',
    \'d':  'diff',
    \'c':  'commit',
    \'a':  'amend commit',
    \}

Inside the group dictionary you can see:
- group options (see |vimdo-group|)
- pairs (continuation of) mapping/description

Finally you create a mapping to show your group:
>
  nnoremap \g? :ShowDos \g<cr>




OPTIONS                                                        *vimdo-options*
==============================================================================

                                                       *g:vimdo_show_filename*
To show the file where the mapping is defined:
>
  let g:vimdo_show_filename = 1
<
                                                         *g:vimdo_interactive*
To always run in interactive mode (see |vimdo-interactive|):
>
  let g:vimdo_interactive = 1
<
                                                *g:vimdo_use_default_commands*
If you want the default commands:
>
  let g:vimdo_use_default_commands = 1
<
                                                      *g:vimdo_default_prefix*
If you to change the default prefix (`do`) for them:
>
  let g:vimdo_default_prefix = 'do'

To read more about the default commands, see |vimdo-default-commands|.



INTERACTIVE MODE                                           *vimdo-interactive*
==============================================================================

The command can be run in interactive mode if the global option is set, or if
a custom group contains the 'interactive' dictionary key.

In this case, the pressed keys will not only refilter the list, but also
trigger the mapping if a match in the list is found.




GROUP DICTIONARY                                                 *vimdo-group*
==============================================================================

In the created dictionary, there can be these optional keys:

- `label`
- `simple`
- `interactive`
- `require_description`
- `arbitrary`
                                                                 *vimdo-label*
`label`: just a label for the header.
                                                                *vimdo-simple*
`simple`: no separators, no 'Press key...' message.

`interactive`: run in interactive mode.
                                                   *vimdo-require_description*
`require_description`: Setting this option prevents unwanted mappings to be
    shown in the list, but forces you to add dictionary entries for all items.

                                                             *vimdo-arbitrary*
`arbitrary`: if true, the group name is not the prefix, it's just a group
    name. The whole keys will be checked for a mapping, but only those ones.
    This allows you to show a set of mapping of your choosing.
    See |vimdo-arbitrary-groups|.

------------------------------------------------------------------------------

These variables control the padding of mappings/descriptions:
>
  let g:vimdo_keys_width = 16
  let g:vimdo_desc_width = 40

------------------------------------------------------------------------------

More optional group dictionary keys:

- `compact`
- `order`
- `keys_width`
- `desc_width`
- `show_rhs`
                                                               *vimdo-compact*
`compact`: lets you show a group in a compact way, on multiple columns, without
    showing the {rhs} of the mapping, only the trigger and the description.
    Note: if `compact` is set, `require_description` is also considered true.

                                                                 *vimdo-order*
`order`: since dictionaries don't preserve order, this key can hold the order
    in which you want the group to be shown. All group mappings must be
    present in this list, or it will fail.

                                                                *vimdo-widths*
`keys_width` and `desc_width`: especially useful to set for a group, when
    using compact mode.

                                                              *vimdo-show_rhs*
`show_rhs`: if present and set to 0, will prevent the rhs of the mappings from
    being displayed.





ARBITRARY GROUPS                                      *vimdo-arbitrary-groups*
==============================================================================

This kind of menu requires `arbitrary` to be set in the group.

You can have groups with elements that aren't simple descriptions, but that
include the full commands, and don't require a mapping. You can then create
contextual menus that execute custom commands at keypress.

The dictionary element must be a list amd not a string:
>
    {key} : [ 'description', "rhs" ]

If the `rhs` is recursive, add a third element:
>
    {key} : [ 'description', "rhs", 1 ]

Note: the {rhs} of the custom command is run with |feedkeys()|, so it must use
`double quotes` and special characters must be escaped.





DEFAULT COMMANDS                                      *vimdo-default-commands*
==============================================================================

If you activated the default commands and didn't change the default prefix,
these mappings are set:
>
    dO    ( show all do's )
    doB   ( show all buffer do's )

If NOT using the default prefix, these mappings will be:
>
    {prefix}?   ( show all do's )
    {prefix}!   ( show all buffer do's )

These are the default commands:

`doft`  ->  do open ftplugin file (custom preferred)
`dofT`  ->  do open ftplugin file (stock vim/nvim only)
`dosn`  ->  do open snippets file for the current filetype
`dorf`  ->  do reindent file
`docf`  ->  do copy file
`dodo`  ->  do diff other file (in next window)
`dods`  ->  do diff with saved
`dodl`  ->  do diff with last git revision
`dodh`  ->  do diff with HEAD
`dout`  ->  do update tags (runs `ctags -R .`, or `b:ctags_cmd` if defined)
`dovp`  ->  do vim profiling (first time activates, second time stops and quits)
`doss`  ->  do print syntax infos for word under cursor
`doec`  ->  do echo color infos
`dofcr` ->  do find CR (find/correct files with CRLF line endings)

If you don't want all defaults, but want some of them, add them to your `vimrc`:
>
  nnoremap doft  :call do#cmd#open_ftplugin()<cr>
  nnoremap dofT  :call do#cmd#open_ftplugin(1)<cr>
  nnoremap dosn  :call do#cmd#snippets()<cr>
  nnoremap dorf  :call do#cmd#reindent_file()<cr>
  nnoremap docf  :call do#cmd#copy_file()<cr>
  nnoremap dodo  :call do#diff#other()<cr>
  nnoremap dods  :call do#diff#saved()<cr>
  nnoremap dodl  :call do#diff#last_revision(0)<cr>
  nnoremap dodh  :call do#diff#last_revision(1)<cr>
  nnoremap dout  :call do#cmd#update_tags()<cr>
  nnoremap dovp  :call do#cmd#profiling()<cr>
  nnoremap dofcr :call do#cmd#find_crlf(1, "")<cr>
  nnoremap dossa :call do#cmd#syntax_attr()<cr>
  nnoremap doec  :call do#color#echo()<cr>




==============================================================================
vim:tw=78:et:sw=2:ts=2:ft=help:norl:nowrap:
